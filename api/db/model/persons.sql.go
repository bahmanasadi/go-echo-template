// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: persons.sql

package model

import (
	"context"
	"database/sql"
)

const createPerson = `-- name: CreatePerson :one
INSERT INTO persons (external_id, email, password, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, external_id, email, password, created_at, updated_at
`

type CreatePersonParams struct {
	ExternalID string
	Email      sql.NullString
	Password   []byte
	CreatedAt  sql.NullTime
	UpdatedAt  sql.NullTime
}

func (q *Queries) CreatePerson(ctx context.Context, arg CreatePersonParams) (Person, error) {
	row := q.db.QueryRowContext(ctx, createPerson,
		arg.ExternalID,
		arg.Email,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPerson = `-- name: GetPerson :one
SELECT id, external_id, email, password, created_at, updated_at
FROM persons
WHERE external_id = $1
`

func (q *Queries) GetPerson(ctx context.Context, externalID string) (Person, error) {
	row := q.db.QueryRowContext(ctx, getPerson, externalID)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPersonByEmail = `-- name: GetPersonByEmail :one
SELECT id, external_id, email, password, created_at, updated_at
FROM persons
WHERE email = $1
`

func (q *Queries) GetPersonByEmail(ctx context.Context, email sql.NullString) (Person, error) {
	row := q.db.QueryRowContext(ctx, getPersonByEmail, email)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
